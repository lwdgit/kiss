<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>极简博客系统</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 07 May 2017 10:22:10 +0800</pubDate>
    <lastBuildDate>Sun, 07 May 2017 10:22:10 +0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>简明使用教程</title>
        <description>## 搭建自己的站点

1.将本项目fork到自己的github项目里
2. 打开 `_config.yml` ，将文件顶部的设置改为自己的个性化设置，保存。

 
```
name: 极简博客系统
mail: lwdggm@gmail.com
description: 极简博客系统
author: lwdgit
github: https://github.com/lwdgit
mail: lwdggm@gmail.com
logo: https://avatars2.githubusercontent.com/u/5530205?v=3&amp;s=20
```

3. 等待10s钟左右打开 `git-pages` 站点，即可看到效果。

## 发布文章

1. 打开 `_posts` 目录，新建一个名为  `2017-10-10-设置自己的标题标题.md` 文件（形式为 xxxx-xx-xx-title.md）。
2. 编辑文件内容，保存。
3. 等待10s钟左右打开 `git-pages` 站点，即可看到新发布的文章。</description>
        <pubDate>Sun, 07 May 2017 00:00:00 +0800</pubDate>
        <link>/post/%E6%9C%AA%E5%BD%92%E7%B1%BB/2017-05-07-%E7%AE%80%E6%98%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.md</link>
        <guid isPermaLink="true">/post/%E6%9C%AA%E5%BD%92%E7%B1%BB/2017-05-07-%E7%AE%80%E6%98%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.md</guid>
        
        
        <category>未归类</category>
        
      </item>
    
      <item>
        <title>特殊字符使用说明</title>
        <description>文件内容本身没有任何限制，但是因为利用了jekyll的限制，所以属于jekyll语法的写法不能直接写，需要特殊处理一下，如:
 

```
{% raw %}

特殊字符 

{% endraw %}
```

这样，便可以原样保持输出。

如果需要设置meta元信息，请参考jekyll的官方写法去写:

```
---
title: my title
category: my tag
tags: my tag
---
```</description>
        <pubDate>Sat, 06 May 2017 00:00:00 +0800</pubDate>
        <link>/post/%E6%9C%AA%E5%BD%92%E7%B1%BB/2017-05-06-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.md</link>
        <guid isPermaLink="true">/post/%E6%9C%AA%E5%BD%92%E7%B1%BB/2017-05-06-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.md</guid>
        
        
        <category>未归类</category>
        
      </item>
    
      <item>
        <title>如何使用手机快速发布一篇blog</title>
        <description>本文在手机上发布。


接下来让我们一起看一下如何做到。

App有两个: 一个是 Pocket Git, 用于管理git项目，一个是 Markdown Editors，用于在手机上编写markdown。

![](https://static.dingtalk.com/media/lADPACOG8zdKl4DNB0HNBDU_1077_1857.jpg_300x300.jpg)


步骤:

1. clone 博客所在项目。

![](https://static.dingtalk.com/media/lADPACOG8zdLCLvNBprNBDY_1078_1690.jpg_300x300.jpg)
![](https://static.dingtalk.com/media/lADPACOG8zdLCLnNBqXNBDE_1073_1701.jpg_300x300.jpg)
![](https://static.dingtalk.com/media/lADPACOG8zdLCLjNA_nNBDY_1078_1017.jpg_300x300.jpg)


2. 进入`_posts`目录，新建一个md文件。

3. 点击右上角菜单图标，选择 `Files` &gt; `New File`。
4. 填写文件名，如: `2017-05-06-my-blog.md`。
  
 ![](https://static.dingtalk.com/media/lALPACOG8zdKBcPNB4DNBDg_1080_1920.png_300x300.jpg)

5. 点击刚才新建的文件名，此时系统会弹出文件编辑器选择。

![](https://static.dingtalk.com/media/lADPACOG8zdLCLfNA8jNBDA_1072_968.jpg_300x300.jpg)

6. 选择`Markdown Editors`，使用`Markdown Editors`编辑markdown文件。
![](https://static.dingtalk.com/media/lADPACOG8zdLCLbNAsbNBDg_1080_710.jpg_300x300.jpg)

7. 完成后保存。

8. 回到 `Pocket Git`，将刚才修改的文件进行`Commit`。
9. 长按文件，按一下大拇指。
10. 再次长按文件，按一下右下角悬浮球。
11. 输入commit信息。

![](https://static.dingtalk.com/media/lADPACOG8zdLCLXNA7bNBDg_1080_950.jpg_300x300.jpg)
![](https://static.dingtalk.com/media/lADPACOG8zdLCLTNA8PNA6c_935_963.jpg_300x300.jpg)

12. 点击云朵图标，选择Push，完成上传。
![](https://static.dingtalk.com/media/lADPACOG8zdLCLLNAknNAko_586_585.jpg_300x300.jpg)

13. 刷新博客，即可看到效果。

到此，我们完成了所有的操作。

总结：发布本身主要是对Git的操作及Pocket Git的使用熟练度。
</description>
        <pubDate>Sat, 06 May 2017 00:00:00 +0800</pubDate>
        <link>/post/%E6%9C%AA%E5%BD%92%E7%B1%BB/2017-05-06-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%89%8B%E6%9C%BA%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E4%B8%80%E7%AF%87blog.md</link>
        <guid isPermaLink="true">/post/%E6%9C%AA%E5%BD%92%E7%B1%BB/2017-05-06-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%89%8B%E6%9C%BA%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83%E4%B8%80%E7%AF%87blog.md</guid>
        
        
        <category>未归类</category>
        
      </item>
    
      <item>
        <title>Markdown语法参考</title>
        <description>Markdown 是一种 Lightweight 标记语言，易读、易写、易改，主要为了方便在 Web 端快速书写文档，由转换器转换为 HTML 呈现在 Web 页面上，最初的 Markdown 转换程序，是一个 Perl 脚本。Markdown 可以使用简单的几个字符，如 `#`, `*`, 等，编写出格式丰富的整齐化一的文档来。

现在，越来越多的 Web 程序支持 Markdown 的在线编辑和展示，如：

* [GitHub](https://github.com/)
* [Stack Overflow](http://stackoverflow.com/)
* [Reddit](https://www.reddit.com/)
* [简书](http://www.jianshu.com/)
* [作业部落](https://www.zybuluo.com/)

专用于 Downdown 写作或支持该格式编写的编辑器很多，Windows 平台有 Typora, MarkdownPad, MarkPad 等。OSX 平台可选的就太多了，有 Mou, Ulysses, iA Writer, Typed, MacDown, Typora 等一系列好用的工具软件。除此之外，还有一大批如 GNU Emacs, Vim, Sublime Tex, Atom 等猿类编辑器也支持这种格式。

Markdown 文件一般用 `.md` 或 `.markdown` 作为扩展名。

[toc]


# 1. 标准Markdown

### 1.1 加粗和强调

```
*emphasize* **strong**

_emphasize_ __strong__

_强调是可以**嵌套**的_
```

*emphasize* **emphasize**

_emphasize_ __strong__

_强调是可以**嵌套**的_

### 1.2 链接和Email

```
链接到 [Github](https://github.com/ &quot;Github&quot;).
```

链接到 [Github](https://github.com/ &quot;Github&quot;).

```
定义链接的ID后 [example][id]，可以在文档下方再定义链接的目标地址：
```

    [id]: http://example.com/  &quot;Title&quot;

定义链接的ID后 [example][id]，可以在文档下方再定义链接的目标地址：

[id]: http://example.com/  &quot;Title&quot;

电子邮件链接：

```
电子邮件链接实例 &lt;example@example.com&gt;
```

电子邮件链接实例 &lt;example@example.com&gt;

### 1.3 图片

```
![图片替换文本（禁止显示图片时会显示此文本）](/path/img.jpg &quot;图片标题（鼠标放到图片上时会显示此文本）&quot;)
```

图片也可以先插入到正文，之后再根据 id 定义图片的路径和显示文本：

```
![图片替换文本（禁止显示图片时会显示此文本）][id]
```

    [id]: /url/to/img.jpg &quot;图片标题（鼠标放到图片上时会显示此文本）&quot;


### 1.4 标题

Markdown 支持两种标题的语法，类 Setext 和类 Atx 形式。

Atx 形式最多支持6级标题：

```
# Header 1 #
## Header 2 ##
...
###### Header 6
```

类 Setext 形式是用底线的形式，利用 = （一级标题）和 - （二级标题）

```
Header 1
========
Header 2
--------
```

这种方式不推荐，统一使用类 Atx 形式即可。

### 1.5 列表

Markdown 支持有序列表和无序列表。

`&lt;ul&gt;` 无序列表使用星号`*`、加号`+`或是减号`-`-作为列表标记：

```
* Item 1
* Item 2
  * Item 2a
  * Item 2b
```

* Item 1
* Item 2
  * Item 2a
  * Item 2b

`&lt;ol&gt;` 有序列表则使用数字接着一个英文句点：

有序列表和无序列表可以混合嵌套：

```
1. Item 1
2. Item 2
3. Item 3
   * Item 3a
   * Item 3b
```

1. Item 1
2. Item 2
3. Item 3
   * Item 3a
   * Item 3b

需要说明的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：
```
&lt;ol&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;McHale&lt;/li&gt;
&lt;li&gt;Parish&lt;/li&gt;
&lt;/ol&gt;
```
如果你的列表标记写成：
```
1.  Bird
1.  McHale
1.  Parish
```
甚至是：
```
3. Bird
1. McHale
8. Parish
```
你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。

如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。

当然，项目列表很可能会不小心产生，像是下面这样的写法
```
1986. What a great season.
```
换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。
```
1986\. What a great season.
```

### 1.6 引用

```
&gt; Email-style angle brackets
&gt; are used for blockquotes.
&gt; &gt; And, they can be nested.
&gt; #### Headers in blockquotes
&gt; 
&gt; * You can quote a list.
&gt; * Etc.
```

&gt; Email-style angle brackets
&gt; are used for blockquotes.
&gt; &gt; And, they can be nested.
&gt; 
&gt; #### Headers in blockquotes
&gt; 
&gt; * You can quote a list.
&gt; * Etc.

### 1.7 代码

#### 1.7.1 行内代码

```
行内代码 `&lt;code&gt;`，也可以放在反引号之间：`` &lt;code&gt; ``。
```

行内代码 `&lt;code&gt;`，也可以放在两对反引号之间：`` &lt;code&gt; ``。

#### 1.7.2 代码块

代码块每行前添加 缩进 4个空格 或 1个制表符：

    #!/usr/bin/perl
    use strict;
    use warnings;

    # first, create your message
    use Email::MIME;
    my $message = Email::MIME-&gt;create(
      header_str =&gt; [
        From    =&gt; 'you@example.com',
        To      =&gt; 'friend@example.com',
        Subject =&gt; 'Happy birthday!',
      ],
      attributes =&gt; {
        encoding =&gt; 'quoted-printable',
        charset  =&gt; 'ISO-8859-1',
      },
      body_str =&gt; &quot;Happy birthday to you!\n&quot;,
    );
    
    # send the message
    use Email::Sender::Simple qw(sendmail);
    sendmail($message);

### 1.8 换行

插入一个空白行即可

### 1.9 水平线

3个以上短线或*号：

```
---
* * *
- - - - 
```

### 1.10 反斜杠

Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 `&lt;em&gt;` 标签），你可以在星号的前面加上反斜杠：
```
\*literal asterisks\*
```

Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：
```
\   反斜线
`   反引号
*   星号
_   底线
{}  花括号
[]  方括号
()  括弧
	#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
```

## 2. 其他语法

### 2.1 脚注

```
这些文字带有脚注[^1]
```
    [^1]: 我是脚注。

### 2.2 表格

简单表格：

```
First Header | Second Header | Third Header
------------ | ------------- | ------------
Content Cell | Content Cell  | Content Cell
Content Cell | Content Cell  | Content Cell
```

First Header | Second Header | Third Header
------------ | ------------- | ------------
Content Cell | Content Cell  | Content Cell
Content Cell | Content Cell  | Content Cell

也可以在行首和行尾加上 | ，效果一样：

```
| First Header | Second Header | Third Header |
| ------------ | ------------- | ------------ |
| Content Cell | Content Cell  | Content Cell |
| Content Cell | Content Cell  | Content Cell |
```

| First Header | Second Header | Third Header |
| ------------ | ------------- | ------------ |
| Content Cell | Content Cell  | Content Cell |
| Content Cell | Content Cell  | Content Cell |

使用英文冒号可以给列设定对齐方式：

```
First Header | Second Header | Third Header
:----------- | :-----------: | -----------:
Left         | Center        | Right
Left         | Center        | Right
```

First Header | Second Header | Third Header
:----------- | :-----------: | -----------:
Left         | Center        | Right
Left         | Center        | Right

### 2.3 锚点

Markdown 中也可以给使用锚链接，下面这是一个普通的 H2 标题：

```
## H2 标题实例
```

加个 id 属性就可以给标题加上锚点：

```
## [带锚点的 H2 实例](id:anchor1)
```

链接到上面的锚点，我们只需要如下的语法即可：

```
预览时点击 [锚链接](#anchor1)
```

### 2.4 删除线

```
~~Strikethrough~~
```

~~Strikethrough 实例~~

## 3. GitHub 支持的 Markdown 语法

### 3.1 语法高亮

    ```javascript
    function fancyAlert(arg) {
      if(arg) {
        $.facebox({div:'#foo'})
      }
    }
    ```

```javascript
function fancyAlert(arg) {
  if(arg) {
    $.facebox({div:'#foo'})
  }
}
```

GitHub 支持的编程语主高亮列表，请查看 [linguist](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml)。

### 3.2 任务列表

```
- [x] @mentions, #refs, [links](), **formatting**, and &lt;del&gt;tags&lt;/del&gt; supported
- [x] list syntax required (any unordered or ordered list supported)
- [x] this is a complete item
- [ ] this is an incomplete item
```

- [x] @mentions, #refs, [links](), **formatting**, and &lt;del&gt;tags&lt;/del&gt; supported
- [x] list syntax required (any unordered or ordered list supported)
- [x] this is a complete item
- [ ] this is an incomplete item

### 3.3 SHA 引用

GitHub 上每个提交都有一个 SHA-1 hash，用它在文档中添加一个指向 GitHut 提交的链接：

```
16c999e8c71134401a78d4d46435517b2271d6ac
mojombo@16c999e8c71134401a78d4d46435517b2271d6ac
mojombo/github-flavored-markdown@16c999e8c71134401a78d4d46435517b2271d6ac
```

### 3.4 同一个仓库中的 Issue 引用

类似 SHA 引用，也可以添加指定编码的仓库内 Issue 或 Pull Request 链接：

```
#1
mojombo#1
mojombo/github-flavored-markdown#1
```

### 3.5 @某用户

类似微博，也可以在 GitHub Markdown 文档中添加 `@WisdomFusion` 的提醒。

### 3.6 自动链接

任何光秃秃的链接都会被自动转为链接的，如

https://github.com/

### 3.7 对 emoji 的支持

这个比较炫酷，文档中还支持 emoji！
```
:smile: :exclamation: :thumbsup:
```
:smile: :exclamation: :thumbsup:

emoji列表：http://www.emoji-cheat-sheet.com/

详细查看[emoji](./emoji.html).

## 4.其他支持项目

### 4.1 复选框列表
- [x] C
- [x] C++
- [x] Java
- [x] Qt
- [x] Android
- [ ] C#
- [ ] .NET

### 4.2 Html 标签

本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：

    &lt;table&gt;
        &lt;tr&gt;
            &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
            &lt;th&gt;星期一&lt;/th&gt;
            &lt;th&gt;星期二&lt;/th&gt;
            &lt;th&gt;星期三&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;李强&lt;/td&gt;
            &lt;td&gt;张明&lt;/td&gt;
            &lt;td&gt;王平&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

### 4.3 待办事宜 Todo 列表

使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：

    - [ ] **Cmd Markdown 开发**
        - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
        - [ ] 支持以 PDF 格式导出文稿
        - [x] 新增Todo列表功能 
        - [x] 改进 LaTex 功能
            - [x] 修复 LaTex 公式渲染问题
            - [x] 新增 LaTex 公式编号功能 
    - [ ] **七月旅行准备**
        - [ ] 准备邮轮上需要携带的物品
        - [ ] 浏览日本免税店的物品
        - [x] 购买蓝宝石公主号七月一日的船票
        
对应显示如下待办事宜 Todo 列表：
        
- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票

## 参考文档

* https://guides.github.com/features/mastering-markdown/
* https://help.github.com/articles/basic-writing-and-formatting-syntax/
* http://www.markdown.cn/

## 协议
文档基于MIT协议，由[WisdomFusion](https://github.com/WisdomFusion/markdown-reference)在Github上分享。由ZNing生成Website

## 本文档原文链接

[单击查看](https://git.zning.net.cn/zning/mdman/src/gh-pages/Markdown语法参考.md)
</description>
        <pubDate>Sat, 06 May 2017 00:00:00 +0800</pubDate>
        <link>/post/kiss/2017-05-06-Markdown%E8%AF%AD%E6%B3%95%E5%8F%82%E8%80%83.md</link>
        <guid isPermaLink="true">/post/kiss/2017-05-06-Markdown%E8%AF%AD%E6%B3%95%E5%8F%82%E8%80%83.md</guid>
        
        <category>kiss</category>
        
        
        <category>kiss</category>
        
      </item>
    
      <item>
        <title>如何使用 git-pages 托管一个不用build的动态博客？</title>
        <description>如何使用 git-pages 托管一个不用build的动态网站？

用过不少的开源搭建博客的网站，其中不乏功能很强大，样式很精美的。但是觉得发布一篇博客非得clone下来编译一下，再提交到github是一件令人很不舒服的事，而托管到第三方平台编译麻烦且不划算，于是便萌生了利用`gitpages`自身的编译能力，将md生成为json文件的想法。

于是 **kiss** 诞生了，数据接口目前有以下两个:
    * `/posts/:page/` 文章列表，默认20个一页，`:page`表示页码，第一页不用加`:page`参数
    * `/post/:url` 文章路径，路径可以在`/posts`列表里面获取到


按照 `jekyll`的约定，我们不得不把文章写在`_post`下，同时我们还需要防止`jekyll`对默认标记进行特殊处理。所以，建议在写文章时，将文章内容放在 {% raw %}和{% endraw %} 之间，像本文一样，如:

```
{% raw %}

# 你的文章title

你的文章正文。。。。。

{% endraw %}
```

* 为什么要费这么大劲绕这么大弯生成一个json数据，官方不是有api?

&gt; * 官方api默认有调用次数限制，所以有一定程度的限制 
&gt; * 官方api时而会有变更，这样会有后期维护成本，其实基于github api的blog有不少，但现在可以搜得到的基本上挂掉了。而本博客系统采用的标准方式实现，不存在这种问题。

* 是否可以支持跨域？

&gt; 跨域需要支持jsonp，而目前很难做真正的jsonp数据，后期考虑封装一套类jsonp调用库。

* 为什么改了文件没有生效？

&gt; jekyll编译需要时间，时间长短视文件多少而定，一般生效时间为1-5分钟左右。当然也有可能是你的文章里面写了特定代码刚好符合jeylly语法规则，但是又出现了语法错误，这样便会导致编译不通过（编译不通过时会收到邮件提醒），所以建议在写文章时，将文章内容放在 {% raw %}和{% endraw %} 之间。

</description>
        <pubDate>Sun, 09 Apr 2017 00:00:00 +0800</pubDate>
        <link>/post/kiss/2017-04-09-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E7%94%A8Build%E7%9A%84%E5%8A%A8%E6%80%81%E5%8D%9A%E5%AE%A2.md</link>
        <guid isPermaLink="true">/post/kiss/2017-04-09-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E7%94%A8Build%E7%9A%84%E5%8A%A8%E6%80%81%E5%8D%9A%E5%AE%A2.md</guid>
        
        <category>kiss</category>
        
        
        <category>kiss</category>
        
      </item>
    
  </channel>
</rss>
